@page "/"
@inject NavigationManager _navigationManager
@implements IAsyncDisposable

<h1>@_title</h1>

<div>
    <span>Введите имя компьютера: </span>
    <input @bind="_wsNames"/>@(" ")
    <button class="btn btn-primary" 
        @onclick="Send" disabled="@(!IsConnected || _isLoading)">Отправить</button>
</div>
<div>
    @if (_isLoading)
    {
        <div>Подождите. Идет сбор информации.</div>
    }
    else if (results.Count == 0)
    {
        <div>Пустой список</div>
    }
    else
    {
        <br />
        <table class="table table-bordered text-center table-striped">
            <thead class="thead-dark">
                <tr>
                    <th style="width:210px">Имя компьютера</th>
                    <th style="width:224px">Материнская плата</th>
                    <th style="width:224px">Процессор</th>
                    <th style="width:154px">Память</th>
                    <th style="width:210px">Видео</th>
                    <th style="width:245px">HDD</th>
                    <th style="width:210px">Мониторы</th>
                    <th style="width:210px">Пользователи</th>
                    <th style="width:210px">Операционная система</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var item in results)
                {
                    <tr>
                        @if(!string.IsNullOrEmpty(item.Error))
                        {
                            <td colspan="9">@item.Error</td>
                        }
                        else
                        {
                            <td style="width:210px">@item.Success.WsName</td>
                            <td style="width:224px;">@($"{item.Success.Motherboard.Model}{Environment.NewLine}Производитель:{Environment.NewLine}{item.Success.Motherboard.Manufacturer}")</td>
                            <td style="width:224px;">@($"{item.Success.Cpu.Name}{Environment.NewLine}Частота: {item.Success.Cpu.Frequency} MHz")</td>
                            <td style="width:154px;">
                                @((MarkupString)$"Весь объем: {item.Success.Rams.Sum(r => r.Capacity / Math.Pow(1024, 2))}Mb<br/>")
                                @((MarkupString) string.Join($"<br/>", item.Success.Rams.Select(r => $"Объем: {r.Capacity / Math.Pow(1024, 2)}Mb{Environment.NewLine}Частота: {r.Speed} MHz")))
                            </td>
                            <td style="width:210px;">@((MarkupString)string.Join($"<br/>", item.Success.VideoAdapters.Select(va => $"{va.Name}<br/>{va.Memory / Math.Pow(1024, 2)} Mb")))</td>
                            <td style="width:245px;">@((MarkupString)string.Join($"<br/>", item.Success.DiskDrives.Select(dd => $"{dd.Name}<br/>{dd.Size / Math.Pow(1024, 3):0.##} Gb")))</td>
                            @if(item.Success.Monitors != null)
                            {
                                <td style="width:210px;">@((MarkupString)string.Join($"<br/>", item.Success.Monitors.Select(mon => $"{mon.Manufacturer}<br/>{mon.Model}<br/>{mon.MonitorConnectionPortName}")))</td>
                            }
                            else 
                            {
                                <td style="width:210px;"></td>   
                            }
                            <td style="width:210px">@($"{item.Success.SystemUser.Login}")</td>
                            <td style="width:210px;">@($"{item.Success.OperatingSystem.Name}{Environment.NewLine}{item.Success.OperatingSystem.OsArchitecture}{Environment.NewLine}SP{item.Success.OperatingSystem.ServicePack}")</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

</div>


@code {
    private string _title = "Технические характеристики компьютеров.";
    private string _wsNames;
    private HubConnection _hubConnection;
    private List<Result<WorkStationModel, string>> results = new List<Result<WorkStationModel, string>>();
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/techinfo"))
            .Build();

        _hubConnection.On<List<Result<WorkStationModel, string>>>("ReceiveInfo", (resultFromApi) =>
        {
            results = resultFromApi;
            _isLoading = false;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    Task Send()
    {
        _isLoading = true;
        var names = _wsNames.Split(' ');
        _wsNames = "";
        StateHasChanged();
        return _hubConnection.SendAsync("GetInfo", names);
    }

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}